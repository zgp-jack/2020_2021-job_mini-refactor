/**
 * ✔ checked
 * ✔ type
 * ✔ onChange(bindchange) :isChecked
 * ✔ color
 *
 * @warn When type="switch", use native Switch
 * @see https://wechat.design/brand/color
 * @example
 *  <Switch
 *    checked={this.state.isSwitchChecked}
 *    onChange={this.onSwitchChange}
 *    color="red"
 *  />
 */
import * as React from 'react';
import { Switch } from 'react-native';
import Checkbox from '../Checkbox';
import { noop } from '../../utils';
class _Switch extends React.Component {
    constructor() {
        super(...arguments);
        // $touchable: Checkbox | Switch | null
        this.$touchable = React.createRef();
        this.state = {
            checked: !!this.props.checked
        };
        this._simulateNativePress = (evt) => {
            const { type } = this.props;
            if (type === 'checkbox') {
                const node = this.$touchable.current;
                node && node._simulateNativePress(evt);
            }
            else {
                // this.$touchable._onChange()
                this.setState({ checked: !this.state.checked });
            }
        };
        this.onCheckedChange = (isChecked) => {
            const { onChange = noop } = this.props;
            onChange({ detail: { value: isChecked } });
            this.setState({ checked: isChecked });
        };
        this.onCheckboxToggle = (item) => {
            this.onCheckedChange(item.checked);
        };
    }
    render() {
        const { style, type, color } = this.props;
        if (type === 'checkbox') {
            return (React.createElement(Checkbox, { onChange: this.onCheckboxToggle, checked: this.state.checked, ref: this.$touchable }));
        }
        return (React.createElement(Switch, { value: this.state.checked, onValueChange: this.onCheckedChange, onTintColor: color, style: style, ref: this.$touchable }));
    }
}
_Switch.defaultProps = {
    type: 'switch',
    color: '#04BE02'
};
export default _Switch;
