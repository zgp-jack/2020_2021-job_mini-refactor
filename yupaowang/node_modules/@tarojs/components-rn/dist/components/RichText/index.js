/**
 * âœ” nodes
 */
import * as React from 'react';
import { View, WebView, } from 'react-native';
import * as ReactDOMServer from 'react-dom/server.browser';
import { omit, parseStyles } from '../../utils';
class _RichText extends React.Component {
    constructor() {
        super(...arguments);
        this.renderChildrens = (arr = []) => {
            if (arr.length === 0)
                return;
            return arr.map((list) => {
                if (list.type === 'text') {
                    return this.renderText(list.text);
                }
                return this.renderNodes(list);
            });
        };
        this.renderText = (text = '') => {
            return React.createElement('span', {
                dangerouslySetInnerHTML: { __html: text },
                key: Math.random()
            });
        };
        this.renderNodes = (item) => {
            const child = this.renderChildrens(item.children);
            return React.createElement(item.name || 'div', Object.assign(Object.assign({ key: Math.random() }, omit(item.attrs, ['class', 'style'])), { className: item.attrs.class, style: parseStyles(item.attrs.style) }), child);
        };
    }
    render() {
        const { style, nodes, } = this.props;
        const html = typeof nodes === 'string'
            ? nodes
            : nodes.map((item) => {
                return ReactDOMServer.renderToStaticMarkup(this.renderNodes(item));
            }).join(',');
        return (React.createElement(View, { style: style },
            React.createElement(WebView, { source: { html }, scalesPageToFit: false, injectedJavaScript: `
            document.documentElement.style.padding = 0;
            document.documentElement.style.margin = 0;
            document.body.style.padding = 0;
            document.body.style.margin = 0;
            true;
          `, style: {
                    backgroundColor: 'transparent'
                } })));
    }
}
_RichText.defaultProps = {
    nodes: ''
};
export default _RichText;
