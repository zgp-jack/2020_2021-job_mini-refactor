/**
 * ✔ hoverStyle: Convert hoverClass to hoverStyle.
 * ✔ hoverStartTime
 * ✔ hoverStayTime
 * ✘ hoverStopPropagation: Fixed value TRUE
 * ✔ onClick(tap)
 * ✔ onLongPress(longpress)
 * ✔ onTouchstart
 * ✘ onTouchmove
 * ✘ onTouchcancel
 * ✔ onTouchend
 */
import * as React from 'react';
import { TouchableWithoutFeedback } from 'react-native';
import { omit, noop } from '../../utils';
const getWxAppEvent = (event) => {
    event.persist();
    const nativeEvent = event.nativeEvent || {};
    const { timestamp, target, pageX, pageY, touches = [], changedTouches = [] } = nativeEvent;
    return {
        type: 'tap',
        timeStamp: timestamp,
        target: {
            id: target,
            dataset: {}
        },
        currentTarget: {
            id: target,
            dataset: {}
        },
        detail: {
            x: pageX,
            y: pageY
        },
        touches: touches.map((item) => {
            return {
                identifier: item.identifier,
                pageX: item.pageX,
                pageY: item.pageY,
                clientX: item.locationX,
                clientY: item.locationY
            };
        }),
        changedTouches: changedTouches.map((item) => {
            return {
                identifier: item.identifier,
                pageX: item.pageX,
                pageY: item.pageY,
                clientX: item.locationX,
                clientY: item.locationY
            };
        })
    };
};
export default function clickableSimplified(WrappedComponent) {
    class ClickableSimplified extends React.Component {
        constructor() {
            super(...arguments);
            this.state = {
                isHover: false
            };
            this.onPress = (evt) => {
                const { onClick = noop } = this.props;
                onClick(getWxAppEvent(evt));
            };
            this.onLongPress = (evt) => {
                const { onLongPress = noop } = this.props;
                onLongPress(getWxAppEvent(evt));
            };
            this.onPressIn = (evt) => {
                const { onTouchstart = noop } = this.props;
                onTouchstart(getWxAppEvent(evt));
                this.setState({ isHover: true });
            };
            this.onPressOut = (evt) => {
                const { onTouchend = noop } = this.props;
                onTouchend(getWxAppEvent(evt));
                this.setState({ isHover: false });
            };
        }
        render() {
            const { style, hoverStyle, hoverStartTime, hoverStayTime, onClick, onLongPress, onTouchstart, onTouchend } = this.props;
            if (!onClick && !onLongPress && !onTouchstart && !onTouchend) {
                return (React.createElement(WrappedComponent, Object.assign({}, this.props)));
            }
            return (React.createElement(TouchableWithoutFeedback, { delayPressIn: hoverStartTime, delayPressOut: hoverStayTime, onPress: this.onPress, onLongPress: this.onLongPress, onPressIn: this.onPressIn, onPressOut: this.onPressOut },
                React.createElement(WrappedComponent, Object.assign({}, omit(this.props, [
                    'style',
                    'hoverStyle',
                    'hoverStartTime',
                    'hoverStayTime',
                    'onClick',
                    'onLongPress',
                    'onTouchstart',
                    'onTouchend'
                ]), { style: [
                        style,
                        this.state.isHover && hoverStyle
                    ] }))));
        }
    }
    ClickableSimplified.displayName = 'Component';
    ClickableSimplified.defaultProps = {
        hoverStartTime: 20,
        hoverStayTime: 70
    };
    ClickableSimplified.displayName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
    return ClickableSimplified;
}
