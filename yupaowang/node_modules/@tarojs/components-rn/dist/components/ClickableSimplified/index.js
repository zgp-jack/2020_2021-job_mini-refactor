/**
 * ✔ hoverStyle: Convert hoverClass to hoverStyle.
 * ✔ hoverStartTime
 * ✔ hoverStayTime
 * ✘ hoverStopPropagation: Fixed value TRUE
 * ✔ onClick(tap)
 * ✔ onLongPress(longpress)
 * ✔ onTouchstart
 * ✘ onTouchmove
 * ✘ onTouchcancel
 * ✔ onTouchend
 */
import * as React from 'react';
import { PanResponder, } from 'react-native';
import { omit } from '../../utils';
export default function (WrappedComponent) {
    var _a;
    return _a = class _Clickable extends React.Component {
            constructor() {
                super(...arguments);
                this.state = {
                    isHover: false
                };
                this.startTimestamp = 0;
                this.panResponder = PanResponder.create({
                    onStartShouldSetPanResponder: (evt, gestureState) => {
                        const { hoverStyle, onClick, onLongPress, onTouchstart, 
                        // onTouchmove,
                        // onTouchcancel,
                        onTouchend } = this.props;
                        return !!(hoverStyle || onClick || onLongPress || onTouchstart || onTouchend);
                    },
                    onShouldBlockNativeResponder: () => false,
                    // onMoveShouldSetPanResponder: (evt: GestureResponderEvent, gestureState) => {
                    //   const { onTouchmove, onTouchcancel, onTouchend } = this.props
                    //   return !!(onTouchmove || onTouchcancel || onTouchend)
                    // },
                    onPanResponderGrant: (evt, gestureState) => {
                        const { onTouchstart } = this.props;
                        onTouchstart && onTouchstart(this.getWxAppEvent(evt));
                        this.startTimestamp = evt.nativeEvent.timestamp;
                        this.setStartTimer();
                    },
                    // onPanResponderMove: (evt: GestureResponderEvent, gestureState) => {
                    //   const { onTouchmove } = this.props
                    //   onTouchmove && onTouchmove(this.getWxAppEvent(evt))
                    // },
                    onPanResponderTerminationRequest: (evt, gestureState) => true,
                    onPanResponderRelease: (evt, gestureState) => {
                        const { onClick, onLongPress, onTouchend } = this.props;
                        onTouchend && onTouchend(this.getWxAppEvent(evt));
                        const endTimestamp = evt.nativeEvent.timestamp;
                        const gapTime = endTimestamp - this.startTimestamp;
                        const hasMove = Math.abs(gestureState.dx) >= 1 || Math.abs(gestureState.dy) >= 1;
                        if (!hasMove) {
                            if (gapTime <= 350) {
                                onClick && onClick(this.getWxAppEvent(evt));
                            }
                            else {
                                onLongPress && onLongPress(this.getWxAppEvent(evt));
                            }
                        }
                        this.setStayTimer();
                    },
                    onPanResponderTerminate: (evt, gestureState) => {
                        // const { onTouchcancel } = this.props
                        // onTouchcancel && onTouchcancel(this.getWxAppEvent(evt))
                        this.setStayTimer();
                    },
                });
                this.setStartTimer = () => {
                    const { hoverStyle, hoverStartTime } = this.props;
                    if (hoverStyle) {
                        this.startTimer && clearTimeout(this.startTimer);
                        this.startTimer = setTimeout(() => {
                            this.setState({ isHover: true });
                        }, hoverStartTime);
                    }
                };
                this.setStayTimer = () => {
                    const { hoverStyle, hoverStayTime } = this.props;
                    this.startTimer && clearTimeout(this.startTimer);
                    if (hoverStyle) {
                        this.stayTimer && clearTimeout(this.stayTimer);
                        this.stayTimer = setTimeout(() => {
                            this.startTimer && clearTimeout(this.startTimer);
                            this.state.isHover && this.setState({ isHover: false });
                        }, hoverStayTime);
                    }
                };
                this.getWxAppEvent = (event) => {
                    const nativeEvent = event.nativeEvent;
                    const { timestamp, target, pageX, pageY, touches = [], changedTouches = [] } = nativeEvent;
                    return {
                        type: 'tap',
                        timeStamp: timestamp,
                        target: {
                            id: target,
                            dataset: {}
                        },
                        currentTarget: {
                            id: target,
                            dataset: {}
                        },
                        detail: {
                            x: pageX,
                            y: pageY
                        },
                        touches: touches.map((item) => {
                            return {
                                identifier: item.identifier,
                                pageX: item.pageX,
                                pageY: item.pageY,
                                clientX: item.locationX,
                                clientY: item.locationY
                            };
                        }),
                        changedTouches: changedTouches.map((item) => {
                            return {
                                identifier: item.identifier,
                                pageX: item.pageX,
                                pageY: item.pageY,
                                clientX: item.locationX,
                                clientY: item.locationY
                            };
                        })
                    };
                };
            }
            componentWillUnmount() {
                this.startTimer && clearTimeout(this.startTimer);
                this.stayTimer && clearTimeout(this.stayTimer);
            }
            render() {
                const { style, hoverStyle, 
                // hoverStopPropagation,
                onClick, onLongPress, onTouchstart, 
                // onTouchmove,
                // onTouchcancel,
                onTouchend, } = this.props;
                const { isHover } = this.state;
                if (!hoverStyle &&
                    // !hoverStopPropagation &&
                    !onClick &&
                    !onLongPress &&
                    !onTouchstart &&
                    // !onTouchmove &&
                    // !onTouchcancel &&
                    !onTouchend) {
                    return (React.createElement(WrappedComponent, Object.assign({}, this.props)));
                }
                return (React.createElement(WrappedComponent, Object.assign({}, omit(this.props, [
                    'style',
                    'hoverStyle',
                    'hoverStartTime',
                    'hoverStayTime',
                    'onClick',
                    'onLongPress',
                    'onTouchstart',
                    // 'onTouchmove',
                    // 'onTouchcancel',
                    'onTouchend'
                ]), this.panResponder.panHandlers, { style: [style, isHover && hoverStyle] })));
            }
        },
        _a.defaultProps = {
            hoverStartTime: 20,
            hoverStayTime: 70
        },
        _a;
}
