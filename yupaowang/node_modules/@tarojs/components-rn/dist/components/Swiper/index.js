/**
 * 注意事项：
 *   Swiper 不能加 `flex: 1`
 *
 * ✔ indicatorDots(indicator-dots)
 * ✔ indicatorColor(indicator-color)
 * ✔ indicatorActiveColor(indicator-active-color)
 * ✔ autoplay
 * ✔ current
 * ✘ currentItemId(current-item-id)
 * ✔ interval
 * ✘ duration
 * ✔ circular
 * ✔ vertical
 * ✘ previousMargin(previous-margin)
 * ✘ nextMargin(next-margin)
 * ✘ displayMultipleItems(display-multiple-items)
 * ✘ skipHiddenItem-layout(skip-hidden-item-layout)
 * ✔ onChange(bindchange): No support for detail.source
 * ✔ onAnimationFinish(bindanimationfinish): No support for detail.source
 *
 * @warn vertical swiper nested in scrollview on android would not work.
 *
 * @example
 * <Swiper
 *   indicatorDots={true}
 *   indicatorColor="white"
 *   indicatorActiveColor="purple"
 *   autoplay={false}
 *   current={1}
 *   interval={6000}
 *   circular={false}
 *   vertical={true}
 *   onChange={() => null}
 *   onAnimationFinish={() => null}
 *   style={{ backgroundColor: 'black' }}
 * >
 *   <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: 'red' }}>
 *     <Text style={styles.text}>Hello Swiper</Text>
 *   </View>
 *   <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: 'green' }}>
 *     <Text style={styles.text}>Beautiful</Text>
 *   </View>
 *   <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: 'blue' }}>
 *     <Text style={styles.text}>And simple</Text>
 *   </View>
 * </Swiper>
 */
import * as React from 'react';
import { StyleSheet } from 'react-native';
// import Swiper from 'react-native-swiper'
import Swiper from '@manjiz/react-native-swiper';
import { noop } from '../../utils';
class _Swiper extends React.Component {
    constructor() {
        super(...arguments);
        this.onIndexChanged = (index) => {
            const { onChange = noop } = this.props;
            onChange({ detail: { current: index } });
        };
        /**
         * e, state, context(ref to swiper's this)
         */
        this.onMomentumScrollEnd = (e, state) => {
            const { onAnimationFinish = noop } = this.props;
            onAnimationFinish({ detail: { current: state.index } });
        };
    }
    render() {
        const { children, style, indicatorDots, indicatorColor, indicatorActiveColor, autoplay, current, interval, circular, vertical, } = this.props;
        // 从样式中取出部分常用样式
        let formattedStyle;
        const containerStyle = {};
        if (style) {
            const flattenStyle = StyleSheet.flatten(style);
            if (flattenStyle) {
                for (let key in flattenStyle) {
                    if (/width|height|margin.*/.test(key)) {
                        containerStyle[key] = flattenStyle[key];
                        delete flattenStyle[key];
                    }
                }
                if (containerStyle.width || containerStyle.height) {
                    containerStyle.flex = 0;
                }
                formattedStyle = flattenStyle;
            }
        }
        return (React.createElement(Swiper, { showsPagination: !!indicatorDots, dotColor: indicatorColor, activeDotColor: indicatorActiveColor, autoplay: !!autoplay, index: current, autoplayTimeout: parseFloat((interval / 1000).toFixed(1)), loop: !!circular, horizontal: !vertical, onIndexChanged: this.onIndexChanged, onMomentumScrollEnd: this.onMomentumScrollEnd, containerStyle: containerStyle, style: formattedStyle || style }, children));
    }
}
_Swiper.defaultProps = {
    indicatorColor: 'rgba(0,0,0,0.3)',
    indicatorActiveColor: '#000',
    current: 0,
    interval: 5000,
};
export default _Swiper;
