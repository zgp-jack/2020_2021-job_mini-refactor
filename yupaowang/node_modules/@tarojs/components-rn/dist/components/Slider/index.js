/**
 * 半受控组件
 *
 * ✔ min
 * ✔ max
 * ✔ step
 * ✔ disabled
 * ✔ value
 * - color
 * - selected-color
 * ✔ activeColor
 * ✔ backgroundColor
 * ✘ blockSize(block-size)
 * ✔ blockColor(block-color)
 * ✔ showValue(show-value)
 * ✔ onChange(bindchange)
 * ✔ onChanging(bindchanging)
 */
import * as React from 'react';
import { View, Text, Slider, } from 'react-native';
import { noop } from '../../utils';
import styles from './styles';
class _Slider extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            currentValue: 0
        };
        this.onSlidingComplete = (value) => {
            const { onChange = noop } = this.props;
            onChange({ detail: { value } });
        };
        this.onValueChange = (value) => {
            const { onChanging = noop } = this.props;
            onChanging({ detail: { value } });
            this.setState({ currentValue: value });
        };
    }
    static getDerivedStateFromProps(props, state) {
        return props.value !== state.currentValue ? {
            currentValue: props.value
        } : null;
    }
    render() {
        const { style, min, max, step, disabled, activeColor, backgroundColor, blockColor, showValue, } = this.props;
        // @todo dismember style
        return (React.createElement(View, { style: styles.wrapper },
            React.createElement(Slider, { minimumValue: min, maximumValue: max, step: step, disabled: !!disabled, value: this.state.currentValue, minimumTrackTintColor: activeColor, maximumTrackTintColor: backgroundColor, thumbTintColor: blockColor, onSlidingComplete: this.onSlidingComplete, onValueChange: this.onValueChange, style: [styles.bar, style] }),
            showValue && React.createElement(Text, { style: styles.info }, this.state.currentValue)));
    }
}
_Slider.defaultProps = {
    min: 0,
    max: 100,
    step: 1,
    value: 0,
    activeColor: '#1aad19',
    backgroundColor: '#e9e9e9',
    blockColor: '#fff',
};
export default _Slider;
